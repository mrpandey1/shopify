{"ast":null,"code":"import { takeLatest, put, call, all, take } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.util';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure());\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n  } catch (error) {}\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/home/nishant/Desktop/ongoing/shopify/src/redux/user/user.saga.js"],"names":["takeLatest","put","call","all","take","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","e","signOut","signUp","displayName","createUserWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest , put, call,all, take } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess,signInFailure, signOutSuccess, signOutFailure, signUpFailure,signUpSuccess} from './user.actions';\nimport { auth , googleProvider, createUserProfileDocument,getCurrentUser }from '../../firebase/firebase.util';\n\nexport function* getSnapShotFromUserAuth(userAuth){\n    try{\n        const userRef=yield call(createUserProfileDocument,userAuth);\n        const userSnapshot=yield userRef.get();\n        yield put(\n            signInSuccess({id:userSnapshot.id,...userSnapshot.data()}));\n    }catch(error){\n        yield put(signInFailure(error));\n    }   \n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user}=yield auth.signInWithPopup(googleProvider);\n        yield getSnapShotFromUserAuth(user);\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n} \n\nexport function* signInWithEmail({payload:{email,password}}){\n    try{\n        const { user }=yield auth.signInWithEmailAndPassword(email  ,password);\n       yield getSnapShotFromUserAuth(user);\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth=yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth);\n    }catch(e){\n        yield put(signInFailure(e))\n    }\n}\n\nexport function* signOut(){\n    try{\n        yield auth.signOut();\n        yield put(signOutSuccess());\n    }catch(error){\n        yield put(signOutFailure());\n    }\n}\nexport function* signUp({payload:{email,password,displayName}}){\n    try{\n        const { user }=yield auth.createUserWithEmailAndPassword(\n            email,\n            password\n        );\n    }catch(error){\n\n    }\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\n}\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\n}\n\nexport function* onSignOutStart(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START,signOut)\n}\n\nexport function* onSignUpStart(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp)\n}\n\nexport function* userSagas(){\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart)\n    ])\n} \n"]},"metadata":{},"sourceType":"module"}