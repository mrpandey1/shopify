{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.util';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}","map":{"version":3,"sources":["/home/nishant/Desktop/ongoing/shopify/src/redux/user/user.saga.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","e","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas","onCheckUserSession","CHECK_USER_SESSION"],"mappings":"AAAA,SAASA,UAAT,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,aAAT,EAAuBC,aAAvB,QAA2C,gBAA3C;AACA,SAASC,IAAT,EAAgBC,cAAhB,EAAgCC,yBAAhC,EAA0DC,cAA1D,QAA+E,8BAA/E;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAG;AACC,UAAMC,OAAO,GAAC,MAAMX,IAAI,CAACO,yBAAD,EAA2BG,QAA3B,CAAxB;AACA,UAAME,YAAY,GAAC,MAAMD,OAAO,CAACE,GAAR,EAAzB;AACA,UAAMd,GAAG,CACLI,aAAa,CAAC;AAACW,MAAAA,EAAE,EAACF,YAAY,CAACE,EAAjB;AAAoB,SAAGF,YAAY,CAACG,IAAb;AAAvB,KAAD,CADR,CAAT;AAEH,GALD,CAKC,OAAMC,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAnB;AACA,UAAMG,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAHD,CAGC,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAT,CAA1B,EAAqD;AACxD,MAAG;AACC,UAAM;AAAEL,MAAAA;AAAF,QAAS,MAAMb,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAwCC,QAAxC,CAArB;AACD,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACF,GAHD,CAGC,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUS,mBAAV,GAA+B;AAClC,MAAG;AACC,UAAMf,QAAQ,GAAC,MAAMF,cAAc,EAAnC;AACA,QAAG,CAACE,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIC,OAAMgB,CAAN,EAAQ;AACL,UAAM3B,GAAG,CAACK,aAAa,CAACsB,CAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,mBAAV,GAA+B;AAClC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,oBAAjB,EAAsCX,gBAAtC,CAAhB;AACH;AACD,OAAO,UAAUY,kBAAV,GAA8B;AACjC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAqCV,eAArC,CAAhB;AACH;AACD,OAAO,UAAUW,SAAV,GAAqB;AACxB,QAAM9B,GAAG,CAAC,CAACD,IAAI,CAAC2B,mBAAD,CAAL,EAA2B3B,IAAI,CAAC6B,kBAAD,CAA/B,CAAD,CAAT;AACH;AAED,OAAO,UAAUG,kBAAV,GAA8B;AACjC,QAAMlC,UAAU,CAACI,eAAe,CAAC+B,kBAAjB,EAAoCR,mBAApC,CAAhB;AACH","sourcesContent":["import { takeLatest , put, call,all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess,signInFailure} from './user.actions';\nimport { auth , googleProvider, createUserProfileDocument,getCurrentUser }from '../../firebase/firebase.util';\n\nexport function* getSnapShotFromUserAuth(userAuth){\n    try{\n        const userRef=yield call(createUserProfileDocument,userAuth);\n        const userSnapshot=yield userRef.get();\n        yield put(\n            signInSuccess({id:userSnapshot.id,...userSnapshot.data()}));\n    }catch(error){\n        yield put(signInFailure(error));\n    }   \n}\n\nexport function* signInWithGoogle(){\n    try{\n        const {user}=yield auth.signInWithPopup(googleProvider);\n        yield getSnapShotFromUserAuth(user);\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n} \n\nexport function* signInWithEmail({payload:{email,password}}){\n    try{\n        const { user }=yield auth.signInWithEmailAndPassword(email  ,password);\n       yield getSnapShotFromUserAuth(user);\n    }catch(error){\n        yield put(signInFailure(error));\n    }\n}\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth=yield getCurrentUser();\n        if(!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth);\n    }catch(e){\n        yield put(signInFailure(e))\n    }\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,signInWithGoogle)\n}\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail)\n}\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart)])\n} \n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,isUserAuthenticated)\n}"]},"metadata":{},"sourceType":"module"}